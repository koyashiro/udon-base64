using UdonSharp;
using Koyashiro.UdonTest;

namespace Koyashiro.UdonBase64.Tests
{
    public class UdonBase64Test : UdonSharpBehaviour
    {
        public void Start()
        {
            Assert.Equal(new byte[] { }, UdonBase64.Decode(string.Empty));

            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw=="));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw==\n"));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw==\r\n"));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw="));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw=\n"));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw=\r\n"));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw"));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw\n"));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw\r\n"));

            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw==", false));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw==\n", false));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw==\n\r", false));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw=", false));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw=\n", false));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw=\n\r", false));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw", false));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw\n", false));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW+D/vrm7eeRo4UEn/FFw\n\r", false));

            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW-D_vrm7eeRo4UEn_FFw==", true));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW-D_vrm7eeRo4UEn_FFw==\n", true));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW-D_vrm7eeRo4UEn_FFw==\n\r", true));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW-D_vrm7eeRo4UEn_FFw=", true));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW-D_vrm7eeRo4UEn_FFw=\n", true));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW-D_vrm7eeRo4UEn_FFw=\n\r", true));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW-D_vrm7eeRo4UEn_FFw", true));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW-D_vrm7eeRo4UEn_FFw\n", true));
            Assert.Equal(new byte[] { 0x54, 0x85, 0xbe, 0x0f, 0xfb, 0xeb, 0x9b, 0xb7, 0x9e, 0x46, 0x8e, 0x14, 0x12, 0x7f, 0xc5, 0x17 }, UdonBase64.Decode("VIW-D_vrm7eeRo4UEn_FFw\n\r", true));
        }
    }
}
